
//---------------该模块由孔维田分析--------------------------
/**************************************************************
* *在SQLite里这是哈希表使用的头文件
***************************************************************/

#ifndef _SQLITE_HASH_H_
#define _SQLITE_HASH_H_

/**************************************************************
* *结构体的声明
***************************************************************/

typedef struct Hash Hash;
typedef struct HashElem HashElem;

/**************************************************************
* *完整的哈希表是下面结构体的实例化。
* *这个结构的内部是不透明——客户端代码不应直接访问或修改该结构。
* *只有通过使用例程才可改变这种结构。
* *然而，一些“程序”和“方法”通过宏来修改和访问，我们不能让这个,
* *结构不透明。
* *哈希表的所有元素都在一个双向链表。hash.first指向此列表的头。
* *有hash.htsize桶。每个桶中指出双向链表的一点,
* *桶中的元素指向链表中的_ht.count-1.
* *hash.htsize和hash.ht可能是零。在这种情况下查找由全局线性
* *搜索完成。
* *对于小表来说，如果表中有几个元素为0，表的的
* *hash.ht就不会分配。线性搜索比管理表的速度要快
***************************************************************/

struct Hash {
  unsigned int htsize;     /*当使用哈希表存储时，哈希表中桶的大小*/
  unsigned int count;      /*哈希表中入口项的个数(记录的个数)*/
  HashElem *first;         /*哈希元素指针，指向入口项双向链表的表头*/
  struct _ht {             /*Hash表*/
    int count;             /*其中 count成员变量记录本桶中记录的数量*/
    HashElem *chain;       /*chain指向桶内记录链表的表头，哈希表使用的冲突消解策略是链表*/
  } *ht;                  /*_ht 结构指针,哈希表存储结构，当使用哈希表存储时，
                           将表现为一个桶的数组,含有两个成员变量*/
};

/**************************************************************
* *哈希表中的每个元素是一个实例的结构。
* *所有元素都存储在一个双链接列表。
* *结构是不透明的，但是又不是真正不透明因为它使用了宏。
***************************************************************/

struct HashElem {
  HashElem *next, *prev;       /*指向哈希表的下一个和前一个元素*/
  void *data;                  /*和元素相关的数据*/
  const char *pKey; int nKey;  /*元素的键值和长度*/
};

/**************************************************************
* *删除、插入一个空指针常规入口
***************************************************************/

void sqlite3HashInit(Hash*);  /*哈希表的初始化函数，将各个成员变量初始化为 0 */
void *sqlite3HashInsert(Hash*, const char *pKey, int nKey, void *pData);  /*向哈希表中插入元素*/
void *sqlite3HashFind(const Hash*, const char *pKey, int nKey);   /*查找哈希表中的元素*/
void sqlite3HashClear(Hash*);  /*将哈希表中所有的入口项删除，就是将 ht 的内存释放，将 first 
                               链表中所有的元素释放；将各个成员变量置 0 */

/**************************************************************
* *哈希表的所有宏定义，定义是这样的：
***************************************************************/
#define sqliteHashFirst(H)  ((H)->first)  /*头指针*/
#define sqliteHashNext(E)   ((E)->next)   /*尾指针*/
#define sqliteHashData(E)   ((E)->data)   /*数据*/

/**************************************************************
* *进入Hash表的数量
***************************************************************/
#endif /* _SQLITE_HASH_H_ */
